openapi: 3.0.0
info:
  version: v2
  title: Dyte v2 Collection
  description: Next generation APIs
  termsOfService: ""
  contact: {}
  license:
    name: ""
servers:
  - url: "https://api.cluster.dyte.in/v2/"
    description: Production server
    variables: {}
components:
  securitySchemes:
    organizationAuth:
      type: http
      scheme: basic
      description: |-
        Basic auth follows a username password scheme.
        Username is Organization ID
        Password is API Key
    userAuth:
      type: http
      scheme: bearer
      description: Uses the bearer token a user will get when they login into their account on Dyte
  schemas:
    Webhook:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 0d1f069d-43bb-489a-ad8c-7eb95592ba8e
        name:
          type: string
          example: All events webhook
        url:
          type: string
          format: uri
          example: https://webhook.site/b23a5bbd-c7b0-4ced-a9e2-78ae7889897e
        events:
          type: array
          items:
            type: string
            enum:
              - meeting.started
              - meeting.ended
              - meeting.participantJoined
              - meeting.participantLeft
              - meeting.statusUpdate
          example:
            - meeting.started
            - meeting.ended
            - meeting.participantJoined
            - meeting.participantLeft
            - meeting.statusUpdate
        created_at:
          type: string
          format: date-time
          example: 2022-05-28T07:01:53.075Z
        updated_at:
          type: string
          format: date-time
          example: 2022-05-28T07:01:53.075Z
    WebhookSuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: "#/components/schemas/Webhook"
    WebhooksListSuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: "#/components/schemas/Webhook"
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: number
              example: 404
            message:
              type: string
              example: "Error: resource not found"
    WebhookRequest:
      type: object
      required:
        - name
        - url
        - events
      properties:
        name:
          type: string
          example: All events webhook
        url:
          type: string
          format: uri
          example: https://webhook.site/#!/b23a5bbd-c7b0-4ced-a9e2-78ae7889897e
        events:
          type: array
          items:
            type: string
            enum:
              - meeting.started
              - meeting.ended
              - meeting.participantJoined
              - meeting.participantLeft
              - meeting.statusUpdate
          example:
            - meeting.started
            - meeting.ended
            - meeting.participantJoined
            - meeting.participantLeft
            - meeting.statusUpdate
    PatchWebhookRequest:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
          format: uri
          example: https://webhook.site/b23a5bbd-c7b0-4ced-a9e2-78ae7889897e
        events:
          type: array
          items:
            type: string
            enum:
              - meeting.started
              - meeting.ended
              - meeting.participantJoined
              - meeting.participantLeft
              - meeting.statusUpdate
    OrganizationRequest:
      type: object
      required:
        - name
        - contact
        - website
      properties:
        name:
          description: Must be a unique organization name
          type: string
          example: Dyte
        contact:
          type: string
          example: 778-330-2389
        website:
          type: string
          format: uri
          example: https://www.dyte.io
        feature_flags:
          type: array
          items:
            type: string
        preferred_region:
          type: string
          enum:
            - ap-south-1
            - ap-southeast-1
            - us-west-1
          default: ap-south-1
          example: us-west-1
    PatchOrganizationRequest:
      type: object
      properties:
        name:
          description: Must be a unique organization name
          type: string
        contact:
          type: string
        website:
          type: string
          format: uri
          example: https://www.dyte.io
        feature_flags:
          type: array
          items:
            type: string
        preferred_region:
          type: string
          enum:
            - ap-south-1
            - ap-southeast-1
            - us-west-1
    OrganizationData:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: bbb0e958-93ce-41c7-9745-16e7aa51c568
        name:
          description: Must be a unique organization name
          type: string
          example: Dyte
        contact:
          type: string
          example: 778-330-2389
        website:
          type: string
          format: uri
          example: https://www.dyte.io
        apikey:
          type: string
          example: 4deeb3d8e8b5e74d5522
        preferred_region:
          type: string
          example: us-west-1
        feature_flags:
          type: array
          items:
            type: string
          example: []
        created_at:
          type: string
          format: date-time
          example: 2022-05-28T08:18:34.804Z
        updated_at:
          type: string
          format: date-time
          example: 2022-05-28T08:18:34.804Z
      required:
        - id
        - name
        - contact
        - website
        - preferred_region
        - feature_flags
        - created_at
        - updated_at
        - apikey
    OrganizationSuccessResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
          example: true
        data:
          allOf:
            - $ref: "#/components/schemas/OrganizationData"
    OrganizationListSuccessResponse:
      type: object
      required:
        - success
        - data
        - paging
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/OrganizationData"
        paging:
          type: object
          properties:
            total_count:
              type: number
              example: 30
            start_offset:
              type: number
              example: 1
            end_offset:
              type: number
              example: 30
          required:
            - total_count
            - start_offset
            - end_offset
    ActiveSession:
      type: object
      properties:
        id:
          type: string
          description: roomUUID of session
          example: 0db62f83-5cee-4adf-9cbd-5d6b0944f9c7
        associated_id:
          type: string
          description: >-
            id of associated object. if session type is meeting, it is
            mapped to meetingId, livestreamId if session type is livestream
          example: 12ff7df8-4d03-4eaa-b1d7-93ce6a9ec2ab
        type:
          type: string
          description: type of session
          enum:
            - meeting
            - livestream
            - participant
          example: meeting
        status:
          type: string
          description: current status of session
          enum:
            - LIVE
            - ENDED
          example: ENDED
        live_participants:
          type: number
          description: number of participants currently in the session
          example: 3
        max_concurrent_participants:
          type: number
          description: number of maximum participants that were in the session
          example: 3
        minutes_consumed:
          type: number
          description: number of minutes consumed since the session started
          example: 30
        organization_id:
          type: string
          description: Organization id that hosted this session
        started_at:
          type: string
          description: timestamp when session started
          example: 2022-05-29T06:40:55.436Z
        ended_at:
          type: string
          description: timestamp when session ended
          example: 2022-05-29T06:50:55.436Z
        created_at:
          type: string
          description: timestamp when session created
          example: 2022-05-29T06:40:55.436Z
        updated_at:
          type: string
          description: timestamp when session was last updated
          example: 2022-05-29T06:50:55.436Z
        meta:
          type: object
          description: Any meta data about session.
    GenericErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: number
              example: 404
            message:
              type: string
              example: "Error: resource not found"
    Participant:
      type: object
      properties:
        id:
          type: string
          example: f8228659-11f2-4392-a38c-c81cd3f5eef0
        name:
          type: string
          example: Rahil
        email:
          type: string
          example: user@domain.com
        picture:
          type: string
          example: https://i.imgur.com/tFiaODa.gif
        verified:
          type: boolean
          example: true
        anonymous:
          type: boolean
          example: false
        allow_mails:
          type: boolean
          example: false
        created_at:
          type: string
          example: 2022-05-29T15:55:37.796Z
        updated_at:
          type: string
          example: 2022-05-29T15:55:37.796Z
    Poll:
      type: object
      properties:
        id:
          type: string
        question:
          type: string
        options:
          type: array
          items:
            type: object
            properties:
              text:
                type: string
              count:
                type: number
              votes:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
        anonymous:
          type: boolean
        hide_votes:
          type: boolean
        created_by:
          type: string
        voted:
          type: array
          items:
            type: string
      example: |
        {
          "id": "8b067d53-75c3-4a71-9a32-eac4cf05ec93",
          "options":
            [
              {
                "text": "A pear",
                "votes":
                  [
                    {
                      "id": "a45c878b-7e31-4c85-92b6-964389399586",
                      "name": "Rahil",
                    },
                  ],
                "count": 1,
              },
              {
                "text": "A 917Ct Natural Brazilian Green Emerald",
                "votes": [],
                "count": 0,
              },
            ],
          "question": "What's green and pear-shaped?",
          "anonymous": false,
          "hideVotes": false,
          "createdBy": "Rahil",
          "createdByUserId": "a45c878b-7e31-4c85-92b6-964389399586",
          "voted": ["a45c878b-7e31-4c85-92b6-964389399586"],
        }
    ParticipantsList:
      type: object
      properties:
        id:
          type: string
          description: Participant ID. This maps to the corresponding peerId.
        user_id:
          type: string
          description: User id for this participant.
        custom_participant_id:
          type: string
          description: ID passed by client to create this participant.
        display_name:
          type: string
          description: Display name of participant when joining the session.
        role:
          type: string
          description: Role of the participant.
        joined_at:
          type: string
          description: timestamp at which participant joined the session.
        left_at:
          type: string
          description: timestamp at which participant left the session.
        duration:
          type: number
          description: number of minutes for which the participant was in the session.
        created_at:
          type: string
          description: timestamp when this participant was created.
        updated_at:
          type: string
          description: timestamp when this participant's data was last updated.
    ParticipantPeerStats:
      type: object
      properties:
        peer_stats:
          type: object
          properties:
            config:
              type: string
            status:
              type: string
            device_info:
              type: object
              properties:
                browser:
                  type: string
                browser_version:
                  type: string
                cpus:
                  type: number
                engine:
                  type: string
                is_mobile:
                  type: boolean
                memory:
                  type: number
                os:
                  type: string
                os_version:
                  type: string
                sdk_name:
                  type: string
                sdk_version:
                  type: string
                user_agent:
                  type: string
                webgl_support:
                  type: string
            events:
              type: array
              items:
                type: object
                properties:
                  timestamp:
                    type: string
                  type:
                    type: string
            ip_information:
              type: object
              properties:
                city:
                  type: string
                country:
                  type: string
                ip_location:
                  type: string
                ipv4:
                  type: string
                org:
                  type: string
                portal:
                  type: string
                region:
                  type: string
                timezone:
                  type: string
            precall_network_information:
              type: object
              properties:
                backend_rtt:
                  type: number
                turn_connectivity:
                  type: boolean
                effective_networktype:
                  type: string
                throughtput:
                  type: number
                jitter:
                  type: number
                rtt:
                  type: number
                reflexive_connectivity:
                  type: boolean
                relay_connectivity:
                  type: boolean
                fractional_loss:
                  type: number
    ParticipantQualityStats:
      type: object
      properties:
        quality_stats:
          type: array
          items:
            type: object
            properties:
              peer_id:
                type: string
              audio_bandwidth:
                type: number
              video_bandwidth:
                type: number
              average_quality:
                type: number
              start:
                type: string
              end:
                type: string
              audio_packet_loss:
                type: number
              video_packet_loss:
                type: number
              audio_stats:
                type: array
                items:
                  type: object
                  properties:
                    timestamp:
                      type: string
                    concealment_events:
                      type: number
                    packets_lost:
                      type: number
                    jitter:
                      type: number
                    quality:
                      type: number
              video_stats:
                type: array
                items:
                  type: object
                  properties:
                    timestamp:
                      type: string
                    frame_width:
                      type: number
                    frame_height:
                      type: number
                    frames_dropped:
                      type: number
                    frames_per_second:
                      type: number
                    packets_lost:
                      type: number
                    jitter:
                      type: number
                    quality:
                      type: number
  parameters:
    Content-Type:
      name: Content-Type
      in: header
      required: true
      style: simple
      schema:
        type: string
        example: application/json
    streamId:
      name: streamId
      in: path
      required: true
      style: simple
      schema:
        type: string
        example: 055094c4-d71a-4143-b1f6-e25261bea90e
    meetingId:
      name: meetingId
      in: path
      required: true
      schema:
        type: string
        example: 055094c4-d71a-4143-b1f6-e25261bea90e
    sessionId:
      name: sessionId
      in: path
      required: true
      schema:
        type: string
    participantId:
      name: participantId
      in: path
      required: true
      schema:
        type: string
    pageNo:
      name: page_no
      in: query
      required: false
      schema:
        type: number
    perPage:
      name: per_page
      in: query
      required: false
      schema:
        type: number
    search:
      name: search
      in: query
      required: false
      schema:
        type: string
    sortOrder:
      name: sort_order
      in: query
      required: false
      schema:
        type: string
        enum:
          - ASC
          - DESC
    startTime:
      name: start_time
      in: query
      required: false
      schema:
        type: string
    endTime:
      name: end_time
      in: query
      required: false
      schema:
        type: string
    participants:
      name: participants
      in: query
      required: false
      schema:
        type: string
      example: "1:10"
    status:
      name: status
      in: query
      required: false
      schema:
        type: string
        enum:
          - LIVE
          - ENDED
    participantsSortBy:
      name: sort_by
      in: query
      schema:
        type: string
        enum:
          - joinedAt
          - duration
  requestBodies:
    KickParticipantsBody:
      description: >-
        Request body for kicking participants from active session. Only
        one of `participant_id` or `custom_participant_id` is required
      content:
        application/json:
          schema:
            type: object
            properties:
              participant_ids:
                type: array
                items:
                  type: string
              custom_participant_ids:
                type: array
                items:
                  type: string
            example: |
              {
                "participant_ids": ["fd264b53-91b6-4402-a287-cb9aeca8d52f"]
              }
    MuteAllParticipantsBody:
      description: Request body for muting all participants in an active session.
      content:
        application/json:
          schema:
            type: object
            properties:
              allow_unmute:
                type: boolean
                example: false
                description: >-
                  if false, participants won't be able to unmute themselves
                  after they are muted
    CreatePollBody:
      description: Request body for creating a new poll
      content:
        application/json:
          schema:
            type: object
            required:
              - question
              - options
            properties:
              question:
                type: string
                description: Question of the poll
              options:
                type: array
                description: Different options for the question, atleast 2 options are required
                items:
                  type: string
              anonymous:
                type: boolean
                description: if voters on a poll are anonymous
              hide_votes:
                type: boolean
                description: if votes on an option are visible before a person votes
            example: |
              {
                "question": "What's green and pear-shaped?",
                "options": ["A pear", "A 917Ct Natural Brazilian Green Emerald"],
                "anonymous": false,
                "hideVotes": false
              }
  responses:
    GetActiveSession:
      description: Active Session Success response
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: "#/components/schemas/ActiveSession"
          examples:
            activeSessionSuccess:
              $ref: "#/components/examples/GetActiveSessionSuccessResponse"
    GetActiveSessionNotFound:
      description: Active Session is not found for the given meetingId
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GenericErrorResponse"
          examples:
            activeSessionNotFound:
              $ref: "#/components/examples/GetActiveSessionNotFoundResponse"
    KickParticipants:
      description: Kick participants success response
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: object
                properties:
                  action:
                    type: string
                  participants:
                    type: array
                    items:
                      $ref: "#/components/schemas/Participant"
    ParticipantNotFound:
      description: No participant found for given `participant_id` or `custom_participant_id`
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GenericErrorResponse"
          examples:
            participantNotFound:
              $ref: "#/components/examples/ParticipantNotFoundResponse"
    KickAllParticipants:
      description: Kick all participants from a meeeting
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: object
                properties:
                  action:
                    type: string
                  kicked_participants_count:
                    type: number
    MuteParticipants:
      description: Mute one or more participants of a meeting
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: object
                properties:
                  action:
                    type: string
                  participants:
                    type: array
                    items:
                      $ref: "#/components/schemas/Participant"
    MuteAllParticipants:
      description: Mute all participants of a meeting
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: object
                properties:
                  action:
                    type: string
                  muted_participants_count:
                    type: number
    CreatePoll:
      description: response for creating a poll
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: object
                properties:
                  action:
                    type: string
                  poll:
                    $ref: "#/components/schemas/Poll"
    GetSessions:
      description: Get all sessions success response
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: object
                properties:
                  sessions:
                    type: array
                    items:
                      $ref: "#/components/schemas/ActiveSession"
    GetSessionDetails:
      description: Get details about a particular session
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: object
                properties:
                  session:
                    $ref: "#/components/schemas/ActiveSession"
    GetSessionParticipants:
      description: Get participants list of a particular session
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: object
                properties:
                  participants:
                    type: array
                    items:
                      $ref: "#/components/schemas/ParticipantsList"
    GetParticipantDetails:
      description: Returns details of a participant along with callstats data.
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: object
                properties:
                  participant:
                    allOf:
                      - $ref: "#/components/schemas/ParticipantsList"
                      - $ref: "#/components/schemas/ParticipantPeerStats"
                      - $ref: "#/components/schemas/ParticipantQualityStats"
  examples:
    GetActiveSessionSuccessResponse:
      summary: Success response for fetching active session
      value:
        success: true
        data:
          id: 813432c7-3c5a-45e2-9acf-eef7061c7584
          associated_id: 6bf2b8be-04dd-4191-b602-1128921a306b
          type: meeting
          status: LIVE
          live_participants: 1
          max_concurrent_participants: 2
          minutes_consumed: 2.3434
          started_at: "2022-01-12T14:21:34.388Z"
          ended_at: "null"
          created_at: "2022-01-12T14:21:34.398Z"
          updated_at: "2022-01-12T14:26:00.784Z"
    GetActiveSessionNotFoundResponse:
      summary: Active Session not found
      value:
        success: false
        error:
          code: 404
          message: No active session found for meeting_id 6bf2b8be-04dd-4191-b602-1128921a306b
    ParticipantNotFoundResponse:
      summary: Participant Not Found
      value:
        success: false
        error:
          code: 404
          message: No user found with id 813432c7-3c5a-45e2-9acf-eef7061c7584
security:
  - organizationAuth: []
paths:
  "/webhooks":
    summary: Represents webhooks for organization
    description: Represents webhooks for organization
    get:
      summary: Get all webhooks
      tags:
        - Webhooks
      description: >-
        Gets details of all webhooks that have been registered for the organization
      operationId: getAllWebhooks
      responses:
        "200":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhooksListSuccessResponse"
              example: |
                {
                  success: true,
                  data: [
                    {
                      id: '901e9adf-ebd9-41f0-9098-28171bc04ddd',
                      name: 'test',
                      events: [ 'meeting.started' ],
                      url: 'https://testURL.com',
                      created_at: '2021-09-09T10:25:12.330Z',
                      updated_at: '2021-09-09T10:25:12.330Z'
                    }
                  ]
                }
        "401":
          description: Invalid credentials
          content:
            application/json:
              example: |
                {
                  message: "Unauthorized"
                }
    post:
      summary: Add a new webhook
      tags:
        - Webhooks
      description: >-
        Add a new webhook to organization
      operationId: addWebhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookRequest"
            example: |
              {
                name: 'test',
                events: [ 'meeting.started' ],
                url: 'https://testURL.com'
              }
      responses:
        "201":
          description: Webhook registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookSuccessResponse"
              example: |
                {
                  success: true,
                  data: {
                    id: '901e9adf-ebd9-41f0-9098-28171bc04ddd',
                    name: 'test',
                    events: [ 'meeting.started' ],
                    url: 'https://testURL.com',
                    created_at: '2021-09-09T10:25:12.330Z',
                    updated_at: '2021-09-09T10:25:12.330Z'
                  }
                }
        "400":
          description: Error - malformed request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example: |
                {
                  success: false,
                  error: { code: 400, message: 'BAD_REQUEST: "name" is required' }
                }
        "401":
          description: Invalid credentials
          content:
            application/json:
              example: |
                {
                  message: "Unauthorized"
                }
  "/webhooks/{id}":
    summary: Represents a single webhook
    description: Represents a single webhook for an organization by ID
    get:
      summary: Get details of a webhook
      description: >-
        Get details of a single webhook by its ID
      tags:
        - Webhooks
      operationId: getWebhook
      parameters:
        - name: id
          in: path
          description: ID of webhook
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookSuccessResponse"
              example: |
                {
                  success: true,
                  data: {
                    id: '901e9adf-ebd9-41f0-9098-28171bc04ddd',
                    name: 'test',
                    events: [ 'meeting.started' ],
                    url: 'https://testURL.com',
                    created_at: '2021-09-09T10:25:12.330Z',
                    updated_at: '2021-09-09T10:25:12.330Z'
                  }
                }
        "400":
          description: Error - malformed request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example: |
                {
                  success: false,
                  error: { code: 400, message: 'BAD_REQUEST: "id" must be a valid GUID' }
                }
        "401":
          description: Invalid credentials
          content:
            application/json:
              example: |
                {
                  message: "Unauthorized"
                }
    put:
      summary: Replace a webhook
      description: Replace all details of a single webhook
      tags:
        - Webhooks
      operationId: replaceWebhook
      parameters:
        - name: id
          in: path
          description: ID of webhook
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookRequest"
            example: |
              {
                name: 'test',
                events: [ 'meeting.started' ],
                url: 'https://testURL.com'
              }
      responses:
        "200":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookSuccessResponse"
              example: |
                {
                  success: true,
                  data: {
                    id: '901e9adf-ebd9-41f0-9098-28171bc04ddd',
                    name: 'test',
                    events: [ 'meeting.started' ],
                    url: 'https://testURL.com',
                    created_at: '2021-09-09T10:25:12.330Z',
                    updated_at: '2021-09-09T10:25:12.376Z'
                  }
                }
        "400":
          description: Error - malformed request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example: |
                {
                  success: false,
                  error: { code: 400, message: 'BAD_REQUEST: "id" must be a valid GUID' }
                }
        "401":
          description: Invalid credentials
          content:
            application/json:
              example: |
                {
                  message: "Unauthorized"
                }
    patch:
      summary: Edit a webhook
      description: Partially edit details of a single webhook
      tags:
        - Webhooks
      operationId: editWebhook
      parameters:
        - name: id
          in: path
          description: ID of webhook
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchWebhookRequest"
            example: |
              {
                name: 'test2',
                events: [ 'meeting.ended' ],
                url: 'https://testURL2.com'
              }
      responses:
        "200":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookSuccessResponse"
              example: |
                {
                  success: true,
                  data: {
                    id: '901e9adf-ebd9-41f0-9098-28171bc04ddd',
                    name: 'test2',
                    events: [ 'meeting.ended' ],
                    url: 'https://testURL2.com',
                    created_at: '2021-09-09T10:25:12.330Z',
                    updated_at: '2021-09-09T10:25:12.367Z'
                  }
                }
        "400":
          description: Error - malformed request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example: |
                {
                  success: false,
                  error: { code: 400, message: 'BAD_REQUEST: "id" must be a valid GUID' }
                }
        "401":
          description: Invalid credentials
          content:
            application/json:
              example: |
                {
                  message: "Unauthorized"
                }
    delete:
      summary: Delete a webhook
      description: Remove a single webhook by ID
      tags:
        - Webhooks
      operationId: deleteWebhook
      parameters:
        - name: id
          in: path
          description: ID of webhook
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookSuccessResponse"
              example: |
                {
                  success: true,
                  data: {
                    id: '901e9adf-ebd9-41f0-9098-28171bc04ddd',
                    name: 'test2',
                    events: [ 'meeting.ended' ],
                    url: 'https://testURL2.com',
                    created_at: '2021-09-09T10:25:12.330Z',
                    updated_at: '2021-09-09T10:25:12.367Z'
                  }
                }
        "400":
          description: Error - malformed request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example: |
                {
                  success: false,
                  error: { code: 400, message: 'BAD_REQUEST: "id" must be a valid GUID' }
                }
        "401":
          description: Invalid credentials
          content:
            application/json:
              example: |
                {
                  message: "Unauthorized"
                }
  "/orgs":
    get:
      summary: Gets all the user's organizations.
      description: Gets all the user's organizations. This endpoint is paginated.
      tags:
        - Organizations
      operationId: getAllOrgs
      security:
        - userAuth: []
      parameters:
        - in: query
          name: per_page
          schema:
            type: integer
            minimum: 1
          description: Number of values to return in a single page. Default value is 25.
        - in: query
          name: page_no
          schema:
            type: integer
            minimum: 1
          description: The page number to return. Default value is 1.
      responses:
        "200":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationListSuccessResponse"
        "400":
          description: Malformed request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      summary: Create a new organization
      description: Create a new organization. The authenticated user becomes the owner of this organization.
      tags:
        - Organizations
      operationId: createOrg
      security:
        - userAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrganizationRequest"
      responses:
        "201":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationSuccessResponse"
        "400":
          description: Malformed request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Organization with the provided name already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  "/orgs/{id}":
    get:
      summary: Get details of a single organization.
      description: Fetches details of a single organization by ID. User must be an owner of this organization.
      tags:
        - Organizations
      operationId: getOrg
      security:
        - userAuth: []
      responses:
        "200":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationSuccessResponse"
        "400":
          description: Malformed request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User is not authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    patch:
      summary: Edit details of an organization.
      description: Fetches details of a single organization. User must be an owner of this org.
      tags:
        - Organizations
      operationId: editOrg
      security:
        - userAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchOrganizationRequest"
      responses:
        "200":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationSuccessResponse"
        "400":
          description: Malformed request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /livestreams:
    post:
      summary: Create a LiveStream
      description: Create a live stream
      operationId: StartaLiveStream
      parameters:
        - $ref: "#/components/parameters/Content-Type"
      responses:
        "200":
          description: ""
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                example-1:
                  value: {}
      requestBody:
        description: Create a live stream
        required: true
        content:
          application/json:
            schema:
              type: string
              example: testing
            example: |-
              {
                  "name": "testing"
              }
      tags:
        - LiveStreams
    get:
      summary: Get all LiveStreams
      description: Get all live streams created by an organization
      operationId: GetallLiveStreams
      parameters: []
      responses:
        "200":
          description: ""
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                example-1:
                  value:
                    success: true
                    message: ""
                    data:
                      limit: 10
                      total: 1
                      totalCount: 1
                      pageCount: 1
                      currentPage: 1
                      livestreams:
                        - id: "850340555635017830461318"
                          title: testing
                          input_rtmp_url: >-
                            rtmp://livestreaming.dyte.io/LiveApp/850340555635017830461318?token=502603528024515256366542
                          token_id: "502603528024515256366542"
                          stream_key: >-
                            850340555635017830461318?token=502603528024515256366542
                          player_url: >-
                            https://livestreaming.dyte.io:5443/LiveApp/play.html?name=850340555635017830461318
                          status: OFFLINE
                          hls_play_url: >-
                            https://livestreaming.dyte.io:5443/LiveApp/streams/850340555635017830461318.m3u8
      tags:
        - LiveStreams
  "/livestreams/{streamId}":
    get:
      summary: Get a LiveStream
      description: Get details of a particular live stream created by an organization
      operationId: GetaLiveStream
      parameters:
        - $ref: "#/components/parameters/streamId"
      responses:
        "200":
          description: ""
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                example-1:
                  value:
                    success: true
                    data:
                      id: "850340555635017830461318"
                      title: testing
                      input_rtmp_url: >-
                        rtmp://livestreaming.dyte.io/LiveApp/850340555635017830461318?token=502603528024515256366542
                      token_id: "502603528024515256366542"
                      stream_key: 850340555635017830461318?token=502603528024515256366542
                      player_url: >-
                        https://livestreaming.dyte.io:5443/LiveApp/play.html?name=850340555635017830461318
                      status: OFFLINE
                      hls_play_url: >-
                        https://livestreaming.dyte.io:5443/LiveApp/streams/850340555635017830461318.m3u8
      tags:
        - LiveStreams
  "/meetings/{meetingId}/active-session":
    get:
      summary: Get an active session
      description: Get an ongoing active session of a meeting
      operationId: GetActiveSession
      parameters:
        - $ref: "#/components/parameters/meetingId"
      tags:
        - ActiveSession
      responses:
        "200":
          $ref: "#/components/responses/GetActiveSession"
        "404":
          $ref: "#/components/responses/GetActiveSessionNotFound"
  "/meetings/{meetingId}/active-session/kick":
    post:
      summary: Kick participants from active session
      description: >-
        Kick one or more participants using userId or customParticipantId
        from an active session
      operationId: KickPartcipants
      parameters:
        - $ref: "#/components/parameters/meetingId"
      tags:
        - ActiveSession
      requestBody:
        $ref: "#/components/requestBodies/KickParticipantsBody"
      responses:
        "200":
          $ref: "#/components/responses/KickParticipants"
        "404":
          $ref: "#/components/responses/ParticipantNotFound"
  "/meetings/{meetingId}/active-session/kick-all":
    post:
      summary: Kick all participant
      description: Kick all participants from an active session
      operationId: KickAllParticipants
      parameters:
        - $ref: "#/components/parameters/meetingId"
      tags:
        - ActiveSession
      responses:
        "200":
          $ref: "#/components/responses/KickAllParticipants"
  "/meetings/{meetingId}/active-session/mute":
    post:
      summary: Mute participants of an active session
      description: >-
        Mute one or more participants from an active session using userId
        or customParticipantId
      operationId: MuteParticipants
      parameters:
        - $ref: "#/components/parameters/meetingId"
      tags:
        - ActiveSession
      requestBody:
        $ref: "#/components/requestBodies/KickParticipantsBody"
      responses:
        "200":
          $ref: "#/components/responses/MuteParticipants"
  "/meetings/{meetingId}/active-session/mute-all":
    post:
      summary: Mute all participants
      description: Mute all participants of an active session
      operationId: MuteAllParticipants
      parameters:
        - $ref: "#/components/parameters/meetingId"
      tags:
        - ActiveSession
      requestBody:
        $ref: "#/components/requestBodies/MuteAllParticipantsBody"
      responses:
        "200":
          $ref: "#/components/responses/MuteAllParticipants"
  "/meetings/{meetingId}/active-session/poll":
    post:
      summary: Create a poll
      description: Create a new poll in an active session
      operationId: CreatePoll
      parameters:
        - $ref: "#/components/parameters/meetingId"
      tags:
        - ActiveSession
      requestBody:
        $ref: "#/components/requestBodies/CreatePollBody"
      responses:
        "201":
          $ref: "#/components/responses/CreatePoll"
  /sessions:
    get:
      summary: Get all sessions of an organization.
      description: >-
        Returns all sessions of an organization. Supports pagination, filtering
        by status and number of participants, search by sessionId or meeting
        name and sorting by date.
      operationId: GetSessions
      tags:
        - Sessions
      parameters:
        - $ref: "#/components/parameters/pageNo"
        - $ref: "#/components/parameters/perPage"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/sortOrder"
        - $ref: "#/components/parameters/startTime"
        - $ref: "#/components/parameters/endTime"
        - $ref: "#/components/parameters/participants"
        - $ref: "#/components/parameters/status"
      responses:
        "200":
          $ref: "#/components/responses/GetSessions"
  "/sessions/{sessionId}":
    get:
      summary: Get details about a particular session.
      description: Returns data about particular session including recording data.
      operationId: GetSessionDetails
      tags:
        - Sessions
      parameters:
        - $ref: "#/components/parameters/sessionId"
      responses:
        "200":
          $ref: "#/components/responses/GetSessionDetails"
  "/sessions/{sessionId}/participants":
    get:
      summary: Get participants list of a session
      description: >-
        Returns participants list that are a part of a given session. Supports
        pagination, search by participant id and sorting by joined date and
        duration.
      operationId: GetSessionParticipants
      tags:
        - Sessions
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/pageNo"
        - $ref: "#/components/parameters/perPage"
        - $ref: "#/components/parameters/sortOrder"
        - $ref: "#/components/parameters/participantsSortBy"
      responses:
        "200":
          $ref: "#/components/responses/GetSessionParticipants"
  "/sessions/{sessionId}/participants/{participantId}":
    get:
      summary: Get details of a participant.
      description: Returns callstats and general data about a participant.
      operationId: GetParticipantDetails
      tags:
        - Sessions
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/participantId"
      responses:
        "200":
          $ref: "#/components/responses/GetParticipantDetails"
tags:
  - name: LiveStreams
  - name: ActiveSession
  - name: Sessions
externalDocs:
  url: ""
  description: ""
